# make_stub_files: Thu 31 Aug 2017 at 12:35:49
def obj2unicode(obj: Any) -> Any: ...
    #   0: return obj
    # ? 0: return obj
    #   1: return unicode_type(obj,'utf-8')
    # ? 1: return unicode_type(obj, str)
    #   2: return unicode_type(obj,'utf-8','replace')
    # ? 2: return unicode_type(obj, str, str)
    #   3: return unicode_type(obj)
    # ? 3: return unicode_type(obj)
def len(iterable: Any) -> Any: ...
    #   0: return sum(w(c) in 'WF' and 2 or 0 if unicodedata.combining(c) else 1  for c in unicode_data)
    # ? 0: return sum(Union[Union[Union[bool, number], number], number] for c in unicode_data)
    #   1: return unicode_data.__len__()
    # ? 1: return unicode_data.__len__()
    #   2: return iterable.__len__()
    # ? 2: return iterable.__len__()
class ArraySizeError(Exception):
    def __init__(self, msg: Any) -> None: ...
    def __str__(self) -> Any: ...
        #   0: return self.msg
        # ? 0: return self.msg
class Texttable:
    def __init__(self, max_width: Any=80) -> None: ...
    def reset(self) -> None: ...
    def set_chars(self, array: Any) -> None: ...
    def set_deco(self, deco: Any) -> None: ...
    def set_cols_align(self, array: Any) -> None: ...
    def set_cols_valign(self, array: Any) -> None: ...
    def set_cols_dtype(self, array: Any) -> None: ...
    def set_cols_width(self, array: Any) -> None: ...
    def set_precision(self, width: Any) -> None: ...
    def header(self, array: Any) -> None: ...
    def add_row(self, array: Any) -> None: ...
    def add_rows(self, rows: Any, header: Any=bool) -> None: ...
    def draw(self) -> Optional[Any]: ...
        #   0: return
        #   0: return 
        #   1: return out[:-1]
        # ? 1: return out[:number]
    def _str(self, i: Any, x: Any) -> Union[Any, str, str(int(round(f)))]: ...
        #   0: return obj2unicode(x)
        # ? 0: return obj2unicode(x)
        #   1: return str(int(round(f)))
        #   1: return str(int(round(f)))
        #   2: return '%.*f'%(n, f)
        #   2: return str
        #   3: return '%.*e'%(n, f)
        #   3: return str
        #   4: return obj2unicode(x)
        # ? 4: return obj2unicode(x)
        #   5: return '%.*e'%(n, f)
        #   5: return str
        #   6: return str(int(round(f)))
        #   6: return str(int(round(f)))
        #   7: return '%.*e'%(n, f)
        #   7: return str
        #   8: return '%.*f'%(n, f)
        #   8: return str
    def _check_row_size(self, array: Any) -> None: ...
    def _has_vlines(self) -> bool: ...
    def _has_hlines(self) -> bool: ...
    def _has_border(self) -> bool: ...
    def _has_header(self) -> bool: ...
    def _hline_header(self) -> Any: ...
        #   0: return self._build_hline(bool)
        # ? 0: return self._build_hline(bool)
    def _hline(self) -> Any: ...
        #   0: return self._hline_string
        # ? 0: return self._hline_string
    def _build_hline(self, is_header: Any=bool) -> Any: ...
        #   0: return l
        # ? 0: return l
    def _len_cell(self, cell: Any) -> Any: ...
        #   0: return maxi
        # ? 0: return maxi
    def _compute_cols_width(self) -> None: ...
    def _check_align(self) -> None: ...
    def _draw_line(self, line: Any, isheader: Any=bool) -> Any: ...
        #   0: return out
        # ? 0: return out
    def _splitit(self, line: Any, isheader: Any) -> Any: ...
        #   0: return line_wrapped
        # ? 0: return line_wrapped
